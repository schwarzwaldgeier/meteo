#!/usr/bin/env python
# -*- coding: utf-8 -*-
import base64
import datetime
import httplib
import os
import re
import signal
import SocketServer
import sys
import urllib2

HOST, PORT = "192.168.1.13", 7977

# Factors calculated by Timm
WIND_SCALING_FACTOR=1.35  # To compensate the conical effect of Merkur.
WIND_OFFSET=16            # Deviation of nord, montage can't be perfect.

def now_str():
    return str(datetime.datetime.now()).split('.')[0]

def handle_signal(signal, frame):
        print('[%s] ! Recieved signal to stop (%s). Quitting...' % (now_str(), signal))
        sys.exit(0)

def load_urls_from_env(key_list):
    urls = []
    for key in key_list:
        prefix = 'SENSITIVE_%s' % key
        try:
            url=os.getenv(prefix + '_URL', None)
            assert url != None
            user=os.getenv(prefix + '_USER', None)
            password=os.getenv(prefix + '_PW', None)
            urls.append((key, url, user, password))
        except AssertionError:
            print "Could not find url in env:'%s'" % key 
            raise
    return urls

class ParseAndPush(SocketServer.BaseRequestHandler):
    @staticmethod
    def clean(string):
        return re.sub("[^0-9\.\,:-]", "", string)

    def handle(self):
        # self.request is the TCP socket connected to the client
        self.raw_data = self.request.recv(1024)
        self.data = self.raw_data.strip().split(',')
        # Example output:
        # 18:27:00, 28.07.16, TE18.44, DR1017.07, FE50.61, WS47.29, WD37.96, WC11.10, WV298.45, 
        # 18:28:00, 28.07.16, TE18.13, DR1017.25, FE51.96, WS47.29, WD36.40, WC11.15, WV302.69, 
        # 18:29:00, 28.07.16, TE17.85, DR1017.12, FE53.93, WS44.10, WD38.11, WC10.45, WV280.93, 
        #
        # and splitted:
        #['18:24:00', ' 28.07.16', ' TE19.79', ' DR1016.73', ' FE40.24', ' WS27.31', ' WD24.74', ' WC14.79', ' WV266.82', ' \x1f']
        xtime, xdate, xte, xpr, xhu, xwmo, xwso, xwc, xwdo = map(self.clean, self.data[:9])

        xws = int(float(xwso) / WIND_SCALING_FACTOR)
        xwm = int(float(xwmo) / WIND_SCALING_FACTOR)
        xwd = int(float(xwdo) - WIND_OFFSET) % 360

        print "[%s] Recieved data" % now_str()
        print "  RAW_DATA: %s" % self.raw_data
        print "  Time of read: %s %s" % (xtime, xdate)
        print "  Temperatur:    %s" % xte
        print "  Luftdruck:     %s" % xpr
        print "  Feuchte:       %s" % xhu
        print "  Windspeed org: %s" % xwso
        print "  Windspeed cal: %s" % xws
        print "  Windmax org:   %s" % xwmo
        print "  Windmax cal:   %s" % xwm
        print "  WRichtung org: %s" % xwdo
        print "  WRichtung cal: %s" % xwd
        print "  Windchill:     %s" % xwc
        print "  DataArray:     %s" % [xtime, xdate, xte, xpr, xhu, xwmo, xwso, xwc, xwdo, xws, xwm, xwd]

        # Timm says by still wind the wind direction provided is negative
        if float(xwso) == 0 and float(xwdo) < 0:  # With 0 wind, set wind and direction to 0
            xws = 0
            xwd = 0
            print "  >> NULLWIND <<"

        # TODO: add logging

        qstring = "?wd=%s&owd=%s&ws=%s&ows=%s&te=%s&pr=%s&ms=%s&oms=%s&hu=%s&wc=%s" % (
                   xwd, xwdo, xws, xwso, xte, xpr, xwm, xwmo, xhu, xwc)
        qstring_time = qstring + "&xtsd=%s&xtst=%s" % (xdate, xtime)

        print "Pushing data to URLs:"
        sys.stdout.flush()
        for name, url, user, password in urls:
            try:
                request = urllib2.Request(url + qstring_time)
                if user:
                    base64string = base64.encodestring('%s:%s' % (user, password)).replace('\n', '')
                    request.add_header("Authorization", "Basic %s" % base64string)
                print  " [", name, "]:", urllib2.urlopen(request).read().strip()

            except urllib2.HTTPError, e:
                print 'HTTPError = ' + str(e.code)
            except urllib2.URLError, e:
                print 'URLError = ' + str(e.reason)
            except httplib.HTTPException, e:
                print 'HTTPException'
            except Exception:
                import traceback
                print 'generic exception: ' + traceback.format_exc()

            sys.stdout.flush()
        print ""

signal.signal(signal.SIGTERM, handle_signal)
SocketServer.TCPServer.allow_reuse_address = True
print "\n[%s] Loading URLs from environment" % now_str()
urls = load_urls_from_env(['BERGRECHNER', 'GSVHOME', 'LENKUNG', 'OPENWEATHERMAP'])
server = SocketServer.TCPServer((HOST, PORT), ParseAndPush)
print "[%s] Starting socket" % now_str()
sys.stdout.flush()
server.serve_forever()

